'use strict';var $WINDOW = $(window),  $DOC = $(document),  $BODY = $('body');/** * !resize only width * */var resizeByWidth = true;var prevWidth = -1;$(window).resize(function () {  var currentWidth = $('body').outerWidth();  resizeByWidth = prevWidth !== currentWidth;  if (resizeByWidth) {    $(window).trigger('resizeByWidth');    prevWidth = currentWidth;  }});/** * !debouncedresize only width * */var debouncedresizeByWidth = true;var debouncedPrevWidth = -1;$(window).on('debouncedresize', function () {  var currentWidth = $('body').outerWidth();  debouncedresizeByWidth = debouncedPrevWidth !== currentWidth;  if (resizeByWidth) {    $(window).trigger('debouncedresizeByWidth');    debouncedPrevWidth = currentWidth;  }});/** * !device detected * */var DESKTOP = device.desktop();var MOBILE = device.mobile();var TABLET = device.tablet();/** *  Add placeholder for old browsers * */function placeholderInit() {  $('[placeholder]').placeholder();}/** * !Show print page by click on the button * */function printShow() {  $('.view-print').on('click', function (e) {    e.preventDefault();    window.print();  })}/** * !Get size of scroll * */function getScrollSize() {  var div = document.createElement('div');  div.style.overflow = 'scroll';  div.style.width = '50px';  div.style.height = '50px';  div.style.position = 'fixed';  div.style.left = '0px';  div.style.bottom = '0px';  div.style.visibility = 'hidden';  document.body.appendChild(div);  document.body.removeChild(div);  var scrollWidth = window.innerWidth - document.body.offsetWidth;  var scrollHeight = window.innerHeight - document.body.offsetHeight;  return {    'width': scrollWidth,    'height': scrollHeight  };}/** * !Add class on scroll page * */$(function () {  var $page = $('html'),    currentScrollTop,    headerIsTopClass = 'header-is-top',    $header = $('.header');  addClassScrollPosition();  $(window)    .off('scroll resizeByWidth')    .on('scroll resizeByWidth', function () {      addClassScrollPosition();    });  function addClassScrollPosition() {    currentScrollTop = $(window).scrollTop();    var cond = $header.offset().top <= currentScrollTop;    $page.toggleClass(headerIsTopClass, cond);    if (cond) {      $header.css('min-height', $header.children().outerHeight());    } else {      $header.css('min-height', '');    }  }});/** * !Sticky element on page * */function stickyInit() {  var $headerSticky = $('.header');  if ($headerSticky.length) {    stickybits('.header', {      useStickyClasses: true,      stickyBitStickyOffset: 0    });  }}(function (window, document, $) {  'use strict';  var countFixedScroll = 0;  var $W = $(window);  var $D = $(document);  var CONST_MOD = {    instanceClass: 'swc-instance',    initClass: 'swc-initialized',    activeClass: 'swc-active',    preventRemoveClass: 'swc-prevent-remove'  };  var SwitchClass = function (element, config) {    var self = this,      elem;    self.element = element;    self.config = config;    self.mixedClasses = {      initialized: CONST_MOD.initClass + ' ' + (config.modifiers.initClass || ''),      active: CONST_MOD.activeClass + ' ' + (config.modifiers.activeClass || ''),      scrollFixedClass: 'css-scroll-fixed'    };    self.$switchClassTo = $(config.toggleEl).add(config.addEl).add(config.removeEl).add(config.switchClassTo);    self._classIsAdded = false;  };  $.extend(SwitchClass.prototype, {    callbacks: function () {      var self = this;      $.each(self.config, function (key, value) {        if (typeof value === 'function') {          $(self.element).on('switchClass.' + key, function (e, param) {            return value(e, $(self.element), param);          });        }      });    },    prevent: function (event) {      event.preventDefault();      event.stopPropagation();      return false;    },    toggleFixedScroll: function () {      var self = this;      $('html').toggleClass(self.mixedClasses.scrollFixedClass, !!countFixedScroll);    },    add: function () {      var self = this;      var $currentEl = self.config.selector ? $(self.config.selector) : $(self.element);      if (self._classIsAdded) return;      $currentEl        .trigger('switchClass.beforeAdd')        .trigger('switchClass.beforeChange');      if (self.config.removeExisting) {        $.switchClass.remove(true);      }      $currentEl.add(self.$switchClassTo)        .addClass(self.mixedClasses.active);      $currentEl.addClass(CONST_MOD.instanceClass).data('SwitchClass', self);      self._classIsAdded = true;      if (self.config.cssScrollFixed) {        ++countFixedScroll;        self.toggleFixedScroll();      }      $currentEl        .trigger('switchClass.afterAdd')        .trigger('switchClass.afterChange');    },    remove: function () {      var self = this;      var $currentEl = self.config.selector ? $(self.config.selector) : $(self.element);      if (!self._classIsAdded) return;      $currentEl        .trigger('switchClass.beforeRemove')        .trigger('switchClass.beforeChange');      $currentEl.add(self.$switchClassTo)        .removeClass(self.mixedClasses.active);      $currentEl.removeClass(CONST_MOD.instanceClass).removeData('SwitchClass');      self._classIsAdded = false;      if (self.config.cssScrollFixed) {        --countFixedScroll;        self.toggleFixedScroll();      }      $currentEl        .trigger('switchClass.afterRemove')        .trigger('switchClass.afterChange');    },    events: function () {      var self = this;      function _toggleClass(e) {        if (self._classIsAdded) {          self.remove();          e.preventDefault();          return false;        }        self.add();        self.prevent(e);      }      if (self.config.selector) {        $(self.element)          .off('click', self.config.selector)          .on('click', self.config.selector, _toggleClass);      } else {        $(self.element)          .off('click')          .on('click', _toggleClass);      }      $(self.config.toggleEl).on('click', _toggleClass);      $(self.config.addEl).on('click', function (event) {        self.add();        self.prevent(event);      });      $(self.config.removeEl).on('click', function (event) {        self.remove();        self.prevent(event);      })    },    removeByClickOutside: function () {      var self = this;      $('html').on('click', function (event) {        if ($(event.target).closest('.' + CONST_MOD.preventRemoveClass).length) {          return;        }        if (self.config.preventRemoveClass && $(event.target).closest('.' + self.config.preventRemoveClass).length) {          return;        }        if (self._classIsAdded && self.config.removeOutsideClick) {          self.remove();        }      });    },    removeByClickEsc: function () {      var self = this;      $('html').keyup(function (event) {        if (self._classIsAdded && self.config.removeEscClick && event.keyCode === 27) {          self.remove();        }      });    },    init: function () {      var self = this;      var $currentEl = self.config.selector ? $(self.config.selector) : $(self.element);      if ($currentEl.hasClass(self.config.modifiers.activeClass)) {        self.add();      }      $currentEl.addClass(self.mixedClasses.initialized);      $currentEl.trigger('switchClass.afterInit');    }  });  $.switchClass = {    version: "2.0",    getInstance: function (command) {      var instance = $('.' + CONST_MOD.instanceClass + '.' + CONST_MOD.activeClass + ':last').data("SwitchClass"),        args = Array.prototype.slice.call(arguments, 1);      if (instance instanceof SwitchClass) {        if ($.type(command) === "string") {          instance[command].apply(instance, args);        } else if ($.type(command) === "function") {          command.apply(instance, args);        }        return instance;      }      return false;    },    remove: function (all) {      var instance = this.getInstance();      if (instance) {        instance.remove();        if (all === true) {          this.remove(all);        }      }    },  };  function _run(el) {    el.switchClass.callbacks();    el.switchClass.events();    el.switchClass.removeByClickOutside();    el.switchClass.removeByClickEsc();    el.switchClass.init();  }  $.fn.switchClass = function (options) {    var self = this,      args = Array.prototype.slice.call(arguments, 1),      l = self.length,      i,      ret;    for (i = 0; i < l; i++) {      if (typeof options === 'object' || typeof options === 'undefined') {        self[i].switchClass = new SwitchClass(self[i], $.extend(true, {}, $.fn.switchClass.defaultOptions, options));        _run(self[i]);      } else {        ret = self[i].switchClass[options].apply(self[i].switchClass, args);      }      if (typeof ret !== 'undefined') {        return ret;      }    }    return self;  };  $.fn.switchClass.defaultOptions = {    removeExisting: false,    selector: null,    addEl: null,    removeEl: null,    toggleEl: null,    switchClassTo: null,    removeOutsideClick: true,    preventRemoveClass: null,    removeEscClick: true,    cssScrollFixed: false,    modifiers: {      initClass: null,      activeClass: 'active'    }  };})(window, document, jQuery);/** * !Toggle shutters * */function toggleShutters() {  var $overlay = $('.shutter-overlay-js'),    $html = $('html'),    $elemens = $('.header, .main, .footer'),    activeClass = 'active';  var $nav = $('.shutter--nav-js');  var $btnNav = $('.btn-nav-js');  $btnNav.on('click', function (e) {    var $curOpener = $(this);    $curOpener.toggleClass(activeClass);    $nav.toggleClass(activeClass);    $overlay.toggleClass(activeClass, $curOpener.hasClass(activeClass));    $html.toggleClass('shutter-after-open css-scroll-fixed shutter-only-mob', $curOpener.hasClass(activeClass));    e.preventDefault();  });  $('.shutter-overlay-js').on('click', function (e) {    $btnNav.removeClass(activeClass);    $nav.removeClass(activeClass);    $overlay.removeClass(activeClass);    $html.removeClass('shutter-after-open css-scroll-fixed shutter-only-mob');    e.preventDefault();  })}/** * !Toggle search field * */function searchFieldToggle() {  var $searchFieldSwitcher = $('.searchicon-js');  if ($searchFieldSwitcher.length) {    var $searchInput = $('.searchform-input-js');    $searchFieldSwitcher.switchClass({      switchClassTo: $('.searchform-js'),      preventRemoveClass: 'searchform-js',      modifiers: {        activeClass: "active"      },      afterAdd: function () {        setTimeout(function () {          $searchInput.focus();        }, 50);      },      afterRemove: function () {        setTimeout(function () {          $searchInput.blur();        }, 50);      }    });  }}/** * !Toggle Catalog * */function catalogToggle() {  var $catalogOpener = $('.catalog-opener-js');  if ($catalogOpener.length) {    $catalogOpener.switchClass({      switchClassTo: $('.catalog-shutter-js').add('.catalog-shutter-overlay-js'),      preventRemoveClass: 'catalog-shutter-prevent-js',      removeEl: $('.catalog-shutter-close'),      cssScrollFixed: true,      modifiers: {        activeClass: "catalog-is-open"      }    });  }}(function ($) {  'use strict';  var MsTabs = function (element, config) {    var self,      $element = $(element),      $anchor = $element.find(config.anchor),      $panels = $element.find(config.panels),      $panel = $element.find(config.panel),      $select = $element.find(config.compactView.elem),      $selectDrop = $element.find(config.compactView.drop),      $html = $('html'),      isAnimated = false,      activeId,      isOpen = false,      isSelectOpen = false,      collapsible = $element.data('tabs-collapsible') || config.collapsible,      pref = 'ms-tabs',      pluginClasses = {        initialized: pref + '_initialized',        active: pref + '_active-tab',        collapsible: pref + '_is-collapsible',        selectOpen: pref + '_select-open'      },      mixedClasses = {        initialized: pluginClasses.initialized + ' ' + (config.modifiers.initClass || ''),        active: pluginClasses.active + ' ' + (config.modifiers.activeClass || ''),        collapsible: pluginClasses.collapsible + ' ' + (config.modifiers.collapsibleClass || ''),        selectOpen: pluginClasses.selectOpen + ' ' + (config.compactView.openClass || '')      };    var callbacks = function () {        $.each(config, function (key, value) {          if (typeof value === 'function') {            $element.on('msTabs.' + key, function (e, param) {              return value(e, $element, param);            });          }        });      },      prevent = function (event) {        event.preventDefault();        event.stopPropagation();        return false;      },      changeSelect = function () {        $select.html($anchor.filter('[href="#' + activeId + '"]').html() + '<i>&#9660;</i>');        $element.trigger('msTabs.afterSelectValChange');      },      eventsSelect = function () {        $select.on('click', function () {          if (isSelectOpen) {            closeSelect();          } else {            openSelect();          }          prevent(event);        })      },      openSelect = function () {        isSelectOpen = true;        $element.add($select).add($selectDrop).addClass(mixedClasses.selectOpen);        $element.trigger('msTabs.afterSelectOpen');      },      closeSelect = function () {        isSelectOpen = false;        $element.add($select).add($selectDrop).removeClass(mixedClasses.selectOpen);        $element.trigger('msTabs.afterSelectClose');      },      closeSelectByClickOutside = function () {        $html.on('click', function (event) {          if (isSelectOpen && config.compactView.closeByClickOutside && !$(event.target).closest($selectDrop).length) {            closeSelect();          }        });      },      closeSelectByClickEsc = function () {        $html.keyup(function (event) {          if (isSelectOpen && config.compactView.closeByClickEsc && event.keyCode === 27) {            closeSelect();          }        });      },      show = function () {        var $activePanel = $panel.filter('[id="' + activeId + '"]'),          $otherPanel = $panel.not('[id="' + activeId + '"]'),          $activeAnchor = $anchor.filter('[href="#' + activeId + '"]');        if (!isAnimated) {          isAnimated = true;          $panel.add($anchor).removeClass(mixedClasses.active);          $activePanel.add($activeAnchor).addClass(mixedClasses.active);          $panels            .css('overflow', 'hidden')            .animate({              'height': $activePanel.outerHeight()            }, config.animationSpeed);          hideTab($otherPanel);          $activePanel            .css({              'z-index': 2,              'visibility': 'visible'            })            .animate({              'opacity': 1            }, config.animationSpeed, function () {              $activePanel                .css({                  'position': 'relative',                  'left': 'auto',                  'top': 'auto',                  'pointer-events': ''                });              $panels.css({                'height': '',                'overflow': ''              });              isOpen = true;              isAnimated = false;            });        }        $element.trigger('msTabs.afterOpen');        $element.trigger('msTabs.afterChange');      },      hide = function () {        var $activePanel = $panel.filter('[id="' + activeId + '"]');        if (!isAnimated) {          isAnimated = true;          $panel.add($anchor).removeClass(mixedClasses.active);          $panels            .css('overflow', 'hidden')            .animate({              'height': 0            }, config.animationSpeed);          hideTab($activePanel, function () {            $panels.css({              'height': ''            });            isOpen = false;            isAnimated = false;          });        }        $element.trigger('msTabs.afterClose');        $element.trigger('msTabs.afterChange');      },      hideTab = function ($_panel) {        var callback = arguments[1];        $_panel          .css({            'z-index': -1          })          .animate({            'opacity': 0          }, config.animationSpeed, function () {            $_panel.css({              'position': 'absolute',              'left': 0,              'top': 0,              'visibility': 'hidden',              'pointer-events': 'none'            });            if (typeof callback === "function") {              callback();            }          });      },      events = function () {        $anchor.on('click', function (event) {          event.preventDefault();          var curId = $(this).attr('href').substring(1);          if (isAnimated || !collapsible && curId === activeId) {            return false;          }          if (collapsible && isOpen && curId === activeId) {            hide();          } else {            activeId = curId;            show();          }          if (config.compactView) {            changeSelect();            closeSelect();          }        });      },      init = function () {        $anchor.filter('.' + pluginClasses.active).addClass(mixedClasses.active);        $anchor.filter('.' + config.modifiers.activeClass).addClass(mixedClasses.active);        $panels.css({          'display': 'block',          'position': 'relative'        });        $panel          .css({            'position': 'absolute',            'left': 0,            'top': 0,            'opacity': 0,            'width': '100%',            'visibility': 'hidden',            'z-index': -1,            'pointer-events': 'none'          });        if ($anchor.filter('.' + pluginClasses.active).length) {          activeId = $anchor.filter('.' + pluginClasses.active).attr('href').substring(1);        } else if (config.activeIndex === 0 || config.activeIndex) {          activeId = $anchor.eq(config.activeIndex).attr('href').substring(1);        }        if (activeId) {          var $activeAnchor = $anchor.filter('[href="#' + activeId + '"]'),            $activePanel = $panel.filter('[id="' + activeId + '"]');          $activePanel.add($activeAnchor).addClass(mixedClasses.active);          $activePanel            .css({              'position': 'relative',              'left': 'auto',              'top': 'auto',              'opacity': 1,              'visibility': 'visible',              'z-index': 2,              'pointer-events': ''            });          isOpen = true;        }        if (config.compactView.elem) {          changeSelect();          if (!config.compactView.drop) {            console.warn('You must choose a DOM element as select drop! Pun in a compactView.drop');          }        }        if (collapsible) {          $element.addClass(mixedClasses.collapsible);        }        $element.addClass(mixedClasses.initialized);        $element.trigger('msTabs.afterInit');      };    self = {      callbacks: callbacks,      eventsSelect: eventsSelect,      closeSelectByClickOutside: closeSelectByClickOutside,      closeSelectByClickEsc: closeSelectByClickEsc,      events: events,      init: init    };    return self;  };  $.fn.msTabs = function () {    var _ = this,      opt = arguments[0],      args = Array.prototype.slice.call(arguments, 1),      l = _.length,      i,      ret;    for (i = 0; i < l; i++) {      if (typeof opt === 'object' || typeof opt === 'undefined') {        _[i].msTabs = new MsTabs(_[i], $.extend(true, {}, $.fn.msTabs.defaultOptions, opt));        _[i].msTabs.init();        _[i].msTabs.callbacks();        _[i].msTabs.eventsSelect();        _[i].msTabs.closeSelectByClickOutside();        _[i].msTabs.closeSelectByClickEsc();        _[i].msTabs.events();      } else {        ret = _[i].msTabs[opt].apply(_[i].msTabs, args);      }      if (typeof ret !== 'undefined') {        return ret;      }    }    return _;  };  $.fn.msTabs.defaultOptions = {    anchor: '.tabs__anchor-js',    panels: '.tabs__panels-js',    panel: '.tabs__panel-js',    animationSpeed: 300,    activeIndex: 0,    collapsible: false,    compactView: {      elem: null,      drop: null,      closeByClickOutside: true,      closeByClickEsc: true,      openClass: null    },    modifiers: {      initClass: null,      collapsibleClass: null,      activeClass: null    }  };})(jQuery);/** * !Tabs for catalog navigation */function catalogNavTabs() {  var $catalogNavTabs = $('.catalog-nav-tabs-js');  if ($catalogNavTabs.length) {    var $catalogNavTabsPanels = $('.catalog-nav-tabs__panels-js');    $catalogNavTabs.msTabs({      anchor: $('.catalog-nav-tabs__thumbs-js').find('a'),      panels: $catalogNavTabsPanels,      panel: $catalogNavTabsPanels.children(),      modifiers: {        activeClass: 'current'      }    });  }}/** * !parallax initial * */function parallaxInit() {  var scene = $('.scene').get(0);  if ($(scene).length) {    var parallaxInstance = new Parallax(scene);  }}/** * !scroll to top * */$(function () {  var $btnToTop = $('.btn-to-top-js');  if ($btnToTop.length) {    var $page = $('html, body'),      minScrollTop = 300;    $(window).on('load scroll resizeByWidth', function () {      var currentScrollTop = $(window).scrollTop();      $btnToTop.toggleClass('btn-to-top--show', (currentScrollTop >= minScrollTop));    });    $btnToTop.on('click', function (e) {      e.preventDefault();      if (!$page.is(':animated')) {        $page.stop().animate({          scrollTop: 0        }, 300);      }    })  }});/** * !Plugin HoverClass * */(function ($) {  var HoverClass = function (settings) {    var options = $.extend({      container: 'ul',      item: 'li',      drop: 'ul'    }, settings || {});    var self = this;    self.options = options;    var container = $(options.container);    self.$container = container;    self.$item = $(options.item, container);    self.$drop = $(options.drop, container);    self.$html = $('html');    self.modifiers = {      hover: 'hover',      hoverNext: 'hover_next',      hoverPrev: 'hover_prev'    };    self.addClassHover();    if (!DESKTOP) {      $(window).on('debouncedresize', function () {        self.removeClassHover();      });    }  };  HoverClass.prototype.addClassHover = function () {    var self = this,      _hover = this.modifiers.hover,      _hoverNext = this.modifiers.hoverNext,      _hoverPrev = this.modifiers.hoverPrev,      $item = self.$item,      item = self.options.item,      $container = self.$container;    if (!DESKTOP) {      $container.on('click', '' + item + '', function (e) {        var $currentAnchor = $(this);        var currentItem = $currentAnchor.closest($item);        if (!currentItem.has(self.$drop).length) {          return;        }        e.stopPropagation();        if (currentItem.hasClass(_hover)) {          currentItem.removeClass(_hover).find('.' + _hover + '').removeClass(_hover);          return;        }        $('.' + _hover + '').not($currentAnchor.parents('.' + _hover + ''))          .removeClass(_hover)          .find('.' + _hover + '')          .removeClass(_hover);        currentItem.addClass(_hover);        e.preventDefault();      });      $container.on('click', '' + self.options.drop + '', function (e) {        e.stopPropagation();      });      $(document).on('click', function () {        $item.removeClass(_hover);      });    } else {      $container.on('mouseenter', '' + item + '', function () {        var currentItem = $(this);        if (currentItem.prop('hoverTimeout')) {          currentItem.prop('hoverTimeout', clearTimeout(currentItem.prop('hoverTimeout')));        }        currentItem.prop('hoverIntent', setTimeout(function () {          currentItem.addClass(_hover);          currentItem.next().addClass(_hoverNext);          currentItem.prev().addClass(_hoverPrev);        }, 50));      }).on('mouseleave', '' + item + '', function () {        var currentItem = $(this);        if (currentItem.prop('hoverIntent')) {          currentItem.prop('hoverIntent', clearTimeout(currentItem.prop('hoverIntent')));        }        currentItem.prop('hoverTimeout', setTimeout(function () {          currentItem.removeClass(_hover);          currentItem.next().removeClass(_hoverNext);          currentItem.prev().removeClass(_hoverPrev);        }, 50));      });    }  };  HoverClass.prototype.removeClassHover = function () {    var self = this;    self.$item.removeClass(self.modifiers.hover);  };  window.HoverClass = HoverClass;}(jQuery));/** * !Toggle "hover" class by hover on the item of the list * */function initHoverClass() {  if ($('.nav__list-js').length) {    new HoverClass({      container: '.nav__list-js',      drop: '.nav__drop-js'    });  }}/** * !Multi accordion jquery plugin * */(function ($) {  var MultiAccordion = function (settings) {    var options = $.extend({      collapsibleAll: false,      resizeCollapsible: false,      container: null,      item: null,      handler: null,      handlerWrap: null,      panel: null,      openClass: 'active',      currentClass: 'current',      animateSpeed: 300,      collapsible: false    }, settings || {});    this.options = options;    var container = $(options.container);    this.$container = container;    this.$item = $(options.item, container);    this.$handler = $(options.handler, container);    this.$handlerWrap = $(options.handlerWrap, container);    this._animateSpeed = options.animateSpeed;    this.$totalCollapsible = $(options.totalCollapsible);    this._resizeCollapsible = options.resizeCollapsible;    this.modifiers = {      active: options.openClass,      current: options.currentClass    };    this.bindEvents();    this.totalCollapsible();    this.totalCollapsibleOnResize();  };  MultiAccordion.prototype.totalCollapsible = function () {    var self = this;    self.$totalCollapsible.on('click', function () {      self.$panel.slideUp(self._animateSpeed, function () {        self.$container.trigger('accordionChange');      });      self.$item.removeClass(self.modifiers.active);    })  };  MultiAccordion.prototype.totalCollapsibleOnResize = function () {    var self = this;    $(window).on('resize', function () {      if (self._resizeCollapsible) {        self.$panel.slideUp(self._animateSpeed, function () {          self.$container.trigger('accordionChange');        });        self.$item.removeClass(self.modifiers.active);      }    });  };  MultiAccordion.prototype.bindEvents = function () {    var self = this;    var $container = this.$container;    var $item = this.$item;    var panel = this.options.panel;    $container.on('click', self.options.handler, function (e) {      var $currentHandler = self.options.handlerWrap ? $(this).closest(self.options.handlerWrap) : $(this);      var $currentItem = $currentHandler.closest($item);      if ($currentItem.has($(panel)).length) {        e.preventDefault();        if ($currentHandler.siblings(panel).is(':visible')) {          self.closePanel($currentItem);          return;        }        if (self.options.collapsibleAll) {          self.closePanel($($container).not($currentHandler.closest($container)).find($item));        }        if (self.options.collapsible) {          self.closePanel($currentItem.siblings());        }        self.openPanel($currentItem, $currentHandler);      }    })  };  MultiAccordion.prototype.closePanel = function ($currentItem) {    var self = this;    var panel = self.options.panel;    var openClass = self.modifiers.active;    $currentItem.removeClass(openClass).find(panel).filter(':visible').slideUp(self._animateSpeed, function () {      self.$container.trigger('mAccordionAfterClose').trigger('mAccordionAfterChange');    });    $currentItem      .find(self.$item)      .removeClass(openClass);  };  MultiAccordion.prototype.openPanel = function ($currentItem, $currentHandler) {    var self = this;    var panel = self.options.panel;    $currentItem.addClass(self.modifiers.active);    $currentHandler.siblings(panel).slideDown(self._animateSpeed, function () {      self.$container.trigger('mAccordionAfterOpened').trigger('mAccordionAfterChange');    });  };  window.MultiAccordion = MultiAccordion;}(jQuery));/** * !Menu accordion * */function menuAccordionInit() {  var menuContainer = '.menu-js';  if ($(menuContainer).length) {    new MultiAccordion({      container: menuContainer,      item: 'li',      handler: '.menu-arr-js',      panel: 'ul',      openClass: 'is-open',      animateSpeed: 200,      collapsible: false    });  }}/** * !Sliders initial * */function slidersInit() {  var footerSlider = '.footerSlider';  if ($(footerSlider).length) {    $(footerSlider).slick({      slidesToShow: 1,      autoplay: true,      autoplaySpeed: 5000,      lazyLoad: 'ondemand'    });  }  var promoSlider = '.promo-slider-js';  if ($(promoSlider).length) {    new Swiper(promoSlider, {      spaceBetween: 0,      loop: true,      navigation: {        nextEl: '.swiper-button-next',        prevEl: '.swiper-button-prev'      }    });  }}/** * Cotalogue. Additional info */function catalogueAddInfo() {  $('.catalogue .item').hover(function () {    $(this).parents('li').siblings('li.active').removeClass('active');    $(this).parents('li').toggleClass('active');    return false;  });}/** * =========== !ready document, load/resize window =========== */$(document).ready(function () {  if (!("ontouchstart" in document.documentElement)) {    document.documentElement.className += " no-touchevents";  } else {    document.documentElement.className += " touch";  }  placeholderInit();  printShow();  objectFitImages();  toggleShutters();  searchFieldToggle();  catalogToggle();  catalogNavTabs();  parallaxInit();  initHoverClass();  menuAccordionInit();  slidersInit();  catalogueAddInfo();});